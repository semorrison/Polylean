import Polylean.Groupoids.Groupoid

-- TODO: Eventually switch to groupoid actions
abbrev Group := Groupoid Unit

theorem Subtype.eq_prop {P P' : X ‚Üí Prop} (h : ‚àÄ x, P x ‚Üî P' x) : Subtype P = Subtype P' :=
  have h' : ‚àÄ x, P x = P' x := Œª x => propext $ h x
  have h'' : P = P' := funext h'
  congrArg _ h''

class Groupoid.Action [G : Group] (S : Sort _) [Œì : Groupoid S] where
  action : (G.hom () ()) ‚Üí (Œì ‚•§ Œì)
  free : {g h : G.hom () ()} ‚Üí action g = action h ‚Üí g = h
  compatibility : {g h : G.hom () ()} ‚Üí action (g ‚â´ h) = (action g) ‚ãô (action h)

namespace Groupoid.Action

variable (S : Sort _) [G : Group] [Œì : Groupoid S] [Œ± : Groupoid.Action S]

@[simp] theorem action_id : action ùüô = (Functor.id S) := sorry


inductive Orbit.rel : S ‚Üí S ‚Üí Prop
  | action (A : S) (g : G.hom () ()) : Orbit.rel A ((Œ±.action g).obj A)

def QuotientSpace := Quot $ Orbit.rel S


abbrev HomCollection (X Y : QuotientSpace S) := 
  Œ£ (A : {Z // X = Quot.mk _ Z}), 
  Œ£ (B : {Z // Y = Quot.mk _ Z}),
    A.val ‚ü∂ B.val
      
/-- The translation of a morphism by an action. -/
inductive HomCollection.rel : (X Y : QuotientSpace S) ‚Üí HomCollection _ X Y ‚Üí HomCollection _ X Y ‚Üí Prop
  | action {A B : S} (f : A ‚ü∂ B) (g : G.hom () ()) : 
      HomCollection.rel (Quot.mk _ A) (Quot.mk _ B) 
        ‚ü®‚ü®A, rfl‚ü©, ‚ü®B, rfl‚ü©, f‚ü©

        ‚ü®‚ü®(Œ±.action g).obj A, Quot.sound (Orbit.rel.action _ _)‚ü©, 
         ‚ü®(Œ±.action g).obj B, Quot.sound (Orbit.rel.action _ _)‚ü©, 
         (Œ±.action g).map f‚ü©

def HomCollection.id (A : S) : HomCollection _ (Quot.mk _ A) (Quot.mk _ A) :=
  ‚ü®‚ü®A, rfl‚ü©, ‚ü®A, rfl‚ü©, ùüô‚ü©

def HomCollection.comp {X Y Z : QuotientSpace S} : HomCollection _ X Y ‚Üí HomCollection _ Y Z ‚Üí HomCollection _ X Z
  | ‚ü®A, B, f‚ü©, ‚ü®B', C, g‚ü© => ‚ü®A, C, f ‚â´ g‚ü©

def HomCollection.inv {X Y : QuotientSpace S} : HomCollection _ X Y ‚Üí HomCollection _ Y X
  | ‚ü®A, B, f‚ü© => ‚ü®B, A, f‚Åª¬π‚ü©

def HomSpace (X Y : QuotientSpace S) := Quot $ HomCollection.rel _ X Y

def HomSpace.id : (X : QuotientSpace S) ‚Üí HomSpace _ X X := 
  Quot.rec (Œª a => Quot.mk _ (HomCollection.id S a))
  (by
    intro a b
    simp [HomCollection.id]
    intro p
    cases p
    sorry
    )

def HomSpace.comp {X Y Z : QuotientSpace S} : HomSpace _ X Y ‚Üí HomSpace _ Y Z ‚Üí HomSpace _ X Z := sorry

def HomSpace.inv {X Y : QuotientSpace S} : HomSpace _ X Y ‚Üí HomSpace _ Y X :=
  Quot.lift (Œª œÜ => Quot.mk _ œÜ.inv) 
  (by
    intro ‚ü®‚ü®A, quotAX‚ü©, ‚ü®B, quotBY‚ü©, (f : A ‚ü∂ B)‚ü©
    intro ‚ü®‚ü®C, quotCX‚ü©, ‚ü®D, quotDY‚ü©, (g : C ‚ü∂ D)‚ü©
    intro h
    apply Quot.sound
    rw [HomCollection.inv, HomCollection.inv]
    dsimp
    cases h with
      | action _ a => 
        have := HomCollection.rel.action f‚Åª¬π a
        simp at this
        exact this)

instance Groupoid.OrbitSpace : Groupoid (QuotientSpace S) where
  hom := HomSpace S
  id := sorry
  comp := sorry
  inv := sorry

  id_comp := sorry
  comp_id := sorry
  comp_assoc := sorry
  inv_comp_id := sorry
  comp_inv_id := sorry

end Groupoid.Action